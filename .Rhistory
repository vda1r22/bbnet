post.node1.try2 <- temp2 # this section works out whether something is more certain if the prior is not used again
#post.node1 <- mean(post.node.calc) # this one immediately reduces probability to post Bayes, so immediate changes, such as increasing reef, will only occur at intial time frame
if(node2[f,1]> 0.5 & post.node1.try2 > post.node1) {post.node1 <- post.node1.try2}
if(node2[f,1]< 0.5 & post.node1.try2 < post.node1) {post.node1 <- post.node1.try2}
if(node2[f,1] == 0.5) {post.node1 <- post.node1.try2}
node2[f,1:2]<- c(post.node1 , 1-post.node1)
node.store2[f, x.rep] <- node2[f,1]
} ### going wrong here, as on 2nd and third run through, those lower than 0.5 are turning into NaN
}
boot.node.store[,,boot]<-node.store2
}
boot.node.mean <- apply(boot.node.store, c(1,2), mean)
boot.node.upper<- apply(boot.node.store, c(1,2), quantile, probs=0.975)
boot.node.lower<- apply(boot.node.store, c(1,2), quantile, probs=0.025)
boot.node.actual <- boot.node.store[,,1]
boot.node.upper.CI<- boot.node.upper - boot.node.mean
boot.node.lower.CI <- boot.node.mean - boot.node.lower
boot.node.actual.CI.upper <- boot.node.actual + boot.node.upper.CI
boot.node.actual.CI.lower <- boot.node.actual - boot.node.lower.CI
########################################### end of Excel Version ######################################
########### production of graphs from time series outputs
for (graphmake in 1: number.nodes){
# if(mean(node.store[graphmake,])>=0.5){
#
# y.vals <- node.store[graphmake,]/max(node.store[graphmake,])}
#
# if(mean(node.store[graphmake,])<0.5){
#
#   y.vals <- 1-(min(node.store[graphmake,])/node.store[graphmake,])}
x.vals <- 1:dim(node.store)[2]
y.vals <- node.store[graphmake,]
vals <- cbind.data.frame(x.vals, y.vals)
colnames(vals) <- c('x', 'y')
name_y <- node[graphmake,3]
rhs<- ggplot(vals, aes(x=x, y=y)) + geom_point(size=2, shape=23) + geom_smooth(se=F, method="loess") +
labs( x="",y = "")+theme(axis.text.y=element_blank(),axis.ticks=element_blank())  +
scale_color_grey() + geom_hline(yintercept=0.5)
lhs <- paste("p", graphmake, "<- rhs", sep="")
eval(parse(text=lhs))
}
##################### Calculation of values as per Stafford et al., 2015 and Excel model
final.output <- node
final.output.CI <- node
colnames(final.output.CI)<-c('LowerCI','UpperCI','name')
for(x in 1:dim(node)[1]){
if((0.5 - min(boot.node.actual[x,]))>(max(boot.node.actual[x,])-0.5)){#if < 0.5 - note, previously [x,3] in both cases on this line, if broken
final.output[x,1] <- min(boot.node.actual[x,])
final.output[x,2] <- 1-final.output[x,1]
final.output.CI[x,1] <- min(boot.node.actual.CI.lower[x,])
final.output.CI[x,2] <- min(boot.node.actual.CI.upper[x,])
}
if((0.5 - min(boot.node.actual[x,]))<(max(boot.node.actual[x,])-0.5)){ #if>0.5 - note, previously [x,3] if broken
final.output[x,1] <- max(boot.node.actual[x,])
final.output[x,2] <- 1-final.output[x,1]
final.output.CI[x,1] <- max(boot.node.actual.CI.lower[x,])
final.output.CI[x,2] <- max(boot.node.actual.CI.upper[x,])
}
}
final.output <- cbind(final.output, final.output.CI[,1:2])
final.output$name <- factor(final.output$name,levels=node$name)
### convert back to -4 to 4 scale
final.output$Increase <- 8*(final.output$Increase - 0.5)
final.output$Decrease <- 8*(final.output$Decrease - 0.5)
final.output$LowerCI <- 8*(final.output$LowerCI - 0.5)
final.output$UpperCI <- 8*(final.output$UpperCI - 0.5)
p0<-ggplot(data=final.output, aes(x=name, y=Increase)) +
geom_point(stat="identity", size=0.5) +
geom_errorbar(aes(ymin = LowerCI, ymax = UpperCI), width=0.1) +
xlab("") + ylab("Predicted change") +
theme(text = element_text(size=5)) +  scale_y_continuous(limits = c(-4, 4))
p0<-p0 + coord_flip()
#lhs <- (paste0("p",1:number.nodes))
#lhs<-toString(lhs)
#lhs <- paste0("multiplot(",lhs,",cols=3)")
#pdf("rplot.pdf")
#eval(parse(text=lhs))
#multiplot(p0, cols=1)
#dev.off()
plot.keep[[policy]] <- p0
}
rm(bbn.model)
rm(policy)
rm(policyno)
BBNfile <- read.csv(Data_raw\'Bali_BBN.csv')
BBNfile <- read.csv("Data_raw\Bali_BBN.csv")
BBNfile <- read.csv("Data_raw/Bali_BBN.csv")
BBNfile <- read.csv("Data_raw/Bali_BBN.csv")
usethis::use_data(BBNfile)
saveRDS(BBNfile, "BBNfile.rds")
BBNfile <- readRDS("data/BBNfile.rds")
View(BBNfile)
library(bbnet)
library(bbnet)
BBNfile <- readRDS("data\BBNfile.rds")
usethis::use_data(BBNfile)
data("BBNfile")
input.files(BBNfile)
priors1 <- read.csv("data_raw\priors1.csv")
priors1 <- read.csv("data_raw/priors1.csv")
usethis::use_data(priors1)
saveRDS(priors1)
saveRDS("data/priors1.rds")
saveRDS(data, "priors1.rds")
usethis::use_data(priors1)
priors2 <- read.csv("data_raw/priors2.csv")
saveRDS(data, "priors2.rds")
usethis::use_data(priors2)
priors3 <- read.csv("data_raw/priors3.csv")
saveRDS(data, "priors3.rds")
usethis::use_data(priors3)
data("BBNfile", "priors1")
data("BBNfile", "priors1", "priors2", "priors3")
input.files(BBNfile, priors1, priors2, priors3)
data("BBNfile", "priors1", "priors2", "priors3")
data("BBNfile", "priors1", "priors2", "priors3")
input.files(BBNfile, priors1, priors2, priors3)
importFrom(ggplot2, multiplot)
multiplot()
library(bbnet)
data("BBNfile", "priors1", "priors2", "priors3") #Load data examples
force(BBNfile)
force(priors1)
force(priors2)
force(priors3)
input.files(BBNfile, priors1, priors2, priors3)
bbn.predict(boot_max, values, figure)
bbn.predict()
bbn.predict(boot_max = 1000, values =0, figure = 2)
library(bbnet)
data("BBNfile", "priors1", "priors2", "priors3") #Load data examples
input.files(BBNfile, priors1, priors2, priors3) # set up of all the BBN models
bbn.predict(bbn.model)
data("BBNfile", "priors1", "priors2", "priors3") #Load data examples
bbn.predict(bbn.model)
library(bbnet)
data("BBNfile", "priors1", "priors2", "priors3") #Load data examples
input.files(BBNfile, priors1, priors2, priors3) # set up of all the BBN models
bbn.predict(bbn.model) # ERROR AT THIS POINT - 173 I THINK
data("BBNfile", "priors1", "priors2", "priors3") #Load data examples
input.files(BBNfile, priors1, priors2, priors3) # set up of all the BBN models
data("BBNfile", "priors1", "priors2", "priors3") #Load data examples
bbn.predict(bbn.model) # ERROR AT THIS POINT - 173 I THINK
library(bbnet)
data("BBNfile","priors1", "priors2", "priors3")
data("bbnet.model","priors1", "priors2", "priors3")
data("bbnmodel","priors1", "priors2", "priors3")
data("bbn.model","priors1", "priors2", "priors3")
library(bbnet)
data("bbn.model","priors1", "priors2", "priors3") # to load package example
bbnet::bbn.model("data/usethis")
bbnet::bbn.model("data/bbnet")
usethis::use_data(data/bbn.model)
usethis::use_data(data/bbn.model.rda)
usethis::use_data(data/BBNfile)
#' rename package datasets
#'
#' Assuming `usethis::use_data()` was used, rename one or several datasets.
#'
#' @param ... One or more unquoted names, in the form `new_name = old_name`
rename_data <- function(...){
args <- eval(substitute(alist(...)))
env <- new.env()
for(i in seq_along(args)){
old_nm <- as.character(args[[i]])
new_nm <- as.character(names(args)[[i]])
old_path <- here::here("data", paste0(old_nm, ".rda"))
new_path <- here::here("data", paste0(new_nm, ".rda"))
load(old_path,env)
assign(new_nm, eval(args[[i]],env), envir = env)
file.remove(old_path)
save(list=new_nm, file = new_path, envir = env)
}
invisible()
}
rename_data(bbn.model = BBNfile)
rename_data <- function(...){
args <- eval(substitute(alist(...)))
env <- new.env()
for(i in seq_along(args)){
old_nm <- as.character(args[[i]])
new_nm <- as.character(names(args)[[i]])
old_path <- here::here("data", paste0(old_nm, ".rda"))
new_path <- here::here("data", paste0(new_nm, ".rda"))
load(old_path,env)
assign(new_nm, eval(args[[i]],env), envir = env)
file.remove(old_path)
save(list=new_nm, file = new_path, envir = env)
}
invisible()
}
rename_data(bbn.model = BBNfile)
rename_data <- function(...){
args <- eval(substitute(alist(...)))
env <- new.env()
for(i in seq_along(args)){
old_nm <- as.character(args[[i]])
new_nm <- as.character(names(args)[[i]])
old_path <- here::here("data", paste0(old_nm, ".rda"))
new_path <- here::here("data", paste0(new_nm, ".rda"))
load(old_path,env)
assign(new_nm, eval(args[[i]],env), envir = env)
file.remove(old_path)
save(list=new_nm, file = new_path, envir = env)
}
invisible()
}
rename_data(bbn.model = BBNfile)
data("bbn.model","priors1", "priors2", "priors3") # to load package example
library(bbnet)
data("bbn.model","priors1", "priors2", "priors3") # to load package example
bbn.predict()
force(bbn.model)
force(priors2)
force(priors3)
bbn.predict(end = 3, boot_max = 1000, values =0, figure = 2)
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
library(bbnet)
## Step 2
# Load your data into R
data("bbn.model","priors1", "priors2", "priors3") # to load package example
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
library(bbnet)
## Step 2
# Load your data into R
data("bbn.model","priors1", "priors2", "priors3") # to load package example
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
library(bbnet)
## Step 2
# Load your data into R
data("bbn.model","priors1", "priors2", "priors3") # to load package example
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
d <- read.csv(file.choose())
save(d, file='RockyShoreNetwork.rda')
## Step 1
# Load library
library(bbnet)
## Step 2
# Load your data into R
data("RockyShoreNetwork")
## Step 2
# Load your data into R
data("RockyShoreNetwork")
my_BBN <- read.csv(file.choose())
save(d, file='my_BBN.rda')
## Step 2
# Load your data into R
data("RockyShoreNetwork")
## Step 2
# Load your data into R
data("my_BBN")
my_BBN <- read.csv(file.choose())
save(mu_BBN, file='my_BBN.rda')
save(my_BBN, file='my_BBN.rda')
## Step 2
# Load your data into R
data("my_BBN")
head(my_BBN)
dogwhelk <- read.csv(file.choose())
winkle <- read.csv(file.choose())
combined <- read.csv(file.choose())
save(dogwhelk, file='dogwhelk.rda')
save(winkle, file='winkle.rda')
save(combined, file='combined.rda')
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
knitr::opts_chunk$set(echo = T)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
library(bbnet)
knitr::opts_chunk$set(echo = T)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
my_network <- read.csv(file.choose())
save(my_network, file='my_network.rda')
rm(my_network)
my_network <- data("my_network")
head(my_network)
data("my_network")
head(my_network)
my_network <- read.csv(file.choose())
data("my_network")
head(my_network)
rm(my_network)
data("my_network")
head(my_network)
library(bbnet)
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
knitr::opts_chunk$set(echo = T)
data("my_network")
head(my_network)
usethis::use_github_links()
c(
person("Rick", "Stafford" "rstafford@bournemouth.ac.uk", role = c("cre", "aut"),
person(
"Jennifer", "Bryan",
email = "jenny@posit.co",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-6983-2759")
)
#> [1] "Jennifer Bryan <jenny@posit.co> [aut, cre] (<https://orcid.org/0000-0002-6983-2759>)"
library(bbnet)
usethis::use_github_links()
usethis::use_package()
usethis::use_tidy_description()
usethis::use_package()
usethis::use_package("dplyr")
library(bbnet)
usethis::use_package("dplyr")
usethis::use_package()
usethis::use_package("ggplot2")
usethis::use_package("grid")
usethis::use_package("igraph")
usethis::use_package("tibble")
library(bbnet)
Code > Insert Roxygen Skeleton
library(bbnet)
devtools::document()
devtools::document()
library(bbnet)
devtools::document()
library(bbnet)
devtools::document()
devtools::document()
library(bbnet)
devtools::document()
library(bbnet)
knitr::opts_chunk$set(echo = T)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
?bbnet
??bbnet
??bbn.perdict
??bbn.predict
??Multiplot
Roxygen: list(markdown = TRUE)
?ggplot2
??ggplot2
??str_flatten()
# Load necessary library
library(ggplot2)
# Create example ggplot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
plot3 <- ggplot(mtcars, aes(x=gear, y=wt)) + geom_point()
# Plot all three plots in a single row
multiplot(plot1, plot2, plot3, cols=3)
# Load necessary library
library(ggplot2)
# Create example ggplot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
plot3 <- ggplot(mtcars, aes(x=gear, y=wt)) + geom_point()
# Plot all three plots in a single row
multiplot(plot1, plot2, plot3, cols=3)
devtools::document()
library(bbnet)
??multiplot
devtools::document()
??multiplot
??multiplot
library(bbnet)
??multiplot
??str_unique
devtools::document()
library(bbnet)
??multiplor
??multiplot
??str_unique
devtools::document()
library(bbnet)
??multiplot
??str_unique
devtools::document()
pkgload::dev_help('multiplot')
??calculateRawCosts
??invacost
install.packages("invacost")
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
library(bbnet)
# Create example ggplot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
plot3 <- ggplot(mtcars, aes(x=gear, y=wt)) + geom_point()
multiplot(plot1, plot2, plot3)
v <- c(1,2,3)
devtools::document()
pkgload::dev_help('isEmpty')
isEmpty(list(a = 1, b = 2))
isEmpty(mtcars)
v<-
c()
isEmpty(v)
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
library(bbnet)
devtools::document()
pkgload::dev_help('bbn.timeseries')
library(bbnet)
devtools::document()
pkgload::dev_help('bbn.visualise')
devtools::document()
devtools::document()
library(bbnet)
usethis::use_vignette("my-vignette")
devtools::load_all()
devtools::document()
library(bbnet)
devtools::document()
usethis::use_readme_rmd()
devtools::build_readme()
usethis::use_cran_badge()
usethis::use_cran_badge()
usethis::use_cran_badge()
usethis::use_coverage()
use_github_actions()
use_github_actions(R CMD check)
R CMD check
usethis::use_readme_rmd()
usethis::use_release_issue()
devtools::document()
library(bbnet)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
devtools::build_readme()
devtools::build_readme()
usethis::use_release_issue()
usethis::use_release_issue()
usethis::use_release_issue()
use_github_action()
usethis::use_github_action()
citation("bbnet")
devtools::document()
devtools::build_readme()
