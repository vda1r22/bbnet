args <- eval(substitute(alist(...)))
env <- new.env()
for(i in seq_along(args)){
old_nm <- as.character(args[[i]])
new_nm <- as.character(names(args)[[i]])
old_path <- here::here("data", paste0(old_nm, ".rda"))
new_path <- here::here("data", paste0(new_nm, ".rda"))
load(old_path,env)
assign(new_nm, eval(args[[i]],env), envir = env)
file.remove(old_path)
save(list=new_nm, file = new_path, envir = env)
}
invisible()
}
rename_data(bbn.model = BBNfile)
rename_data <- function(...){
args <- eval(substitute(alist(...)))
env <- new.env()
for(i in seq_along(args)){
old_nm <- as.character(args[[i]])
new_nm <- as.character(names(args)[[i]])
old_path <- here::here("data", paste0(old_nm, ".rda"))
new_path <- here::here("data", paste0(new_nm, ".rda"))
load(old_path,env)
assign(new_nm, eval(args[[i]],env), envir = env)
file.remove(old_path)
save(list=new_nm, file = new_path, envir = env)
}
invisible()
}
rename_data(bbn.model = BBNfile)
rename_data <- function(...){
args <- eval(substitute(alist(...)))
env <- new.env()
for(i in seq_along(args)){
old_nm <- as.character(args[[i]])
new_nm <- as.character(names(args)[[i]])
old_path <- here::here("data", paste0(old_nm, ".rda"))
new_path <- here::here("data", paste0(new_nm, ".rda"))
load(old_path,env)
assign(new_nm, eval(args[[i]],env), envir = env)
file.remove(old_path)
save(list=new_nm, file = new_path, envir = env)
}
invisible()
}
rename_data(bbn.model = BBNfile)
data("bbn.model","priors1", "priors2", "priors3") # to load package example
library(bbnet)
data("bbn.model","priors1", "priors2", "priors3") # to load package example
bbn.predict()
force(bbn.model)
force(priors2)
force(priors3)
bbn.predict(end = 3, boot_max = 1000, values =0, figure = 2)
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
library(bbnet)
## Step 2
# Load your data into R
data("bbn.model","priors1", "priors2", "priors3") # to load package example
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
library(bbnet)
## Step 2
# Load your data into R
data("bbn.model","priors1", "priors2", "priors3") # to load package example
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
library(bbnet)
## Step 2
# Load your data into R
data("bbn.model","priors1", "priors2", "priors3") # to load package example
# bbn.predict()
bbn.predict(end = 3, boot_max = 1, values =0, figure = 2)
d <- read.csv(file.choose())
save(d, file='RockyShoreNetwork.rda')
## Step 1
# Load library
library(bbnet)
## Step 2
# Load your data into R
data("RockyShoreNetwork")
## Step 2
# Load your data into R
data("RockyShoreNetwork")
my_BBN <- read.csv(file.choose())
save(d, file='my_BBN.rda')
## Step 2
# Load your data into R
data("RockyShoreNetwork")
## Step 2
# Load your data into R
data("my_BBN")
my_BBN <- read.csv(file.choose())
save(mu_BBN, file='my_BBN.rda')
save(my_BBN, file='my_BBN.rda')
## Step 2
# Load your data into R
data("my_BBN")
head(my_BBN)
dogwhelk <- read.csv(file.choose())
winkle <- read.csv(file.choose())
combined <- read.csv(file.choose())
save(dogwhelk, file='dogwhelk.rda')
save(winkle, file='winkle.rda')
save(combined, file='combined.rda')
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
knitr::opts_chunk$set(echo = T)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
library(bbnet)
knitr::opts_chunk$set(echo = T)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
my_network <- read.csv(file.choose())
save(my_network, file='my_network.rda')
rm(my_network)
my_network <- data("my_network")
head(my_network)
data("my_network")
head(my_network)
my_network <- read.csv(file.choose())
data("my_network")
head(my_network)
rm(my_network)
data("my_network")
head(my_network)
library(bbnet)
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
knitr::opts_chunk$set(echo = T)
data("my_network")
head(my_network)
usethis::use_github_links()
c(
person("Rick", "Stafford" "rstafford@bournemouth.ac.uk", role = c("cre", "aut"),
person(
"Jennifer", "Bryan",
email = "jenny@posit.co",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-6983-2759")
)
#> [1] "Jennifer Bryan <jenny@posit.co> [aut, cre] (<https://orcid.org/0000-0002-6983-2759>)"
library(bbnet)
usethis::use_github_links()
usethis::use_package()
usethis::use_tidy_description()
usethis::use_package()
usethis::use_package("dplyr")
library(bbnet)
usethis::use_package("dplyr")
usethis::use_package()
usethis::use_package("ggplot2")
usethis::use_package("grid")
usethis::use_package("igraph")
usethis::use_package("tibble")
library(bbnet)
Code > Insert Roxygen Skeleton
library(bbnet)
devtools::document()
devtools::document()
library(bbnet)
devtools::document()
library(bbnet)
devtools::document()
devtools::document()
library(bbnet)
devtools::document()
library(bbnet)
knitr::opts_chunk$set(echo = T)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
?bbnet
??bbnet
??bbn.perdict
??bbn.predict
??Multiplot
Roxygen: list(markdown = TRUE)
?ggplot2
??ggplot2
??str_flatten()
# Load necessary library
library(ggplot2)
# Create example ggplot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
plot3 <- ggplot(mtcars, aes(x=gear, y=wt)) + geom_point()
# Plot all three plots in a single row
multiplot(plot1, plot2, plot3, cols=3)
# Load necessary library
library(ggplot2)
# Create example ggplot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
plot3 <- ggplot(mtcars, aes(x=gear, y=wt)) + geom_point()
# Plot all three plots in a single row
multiplot(plot1, plot2, plot3, cols=3)
devtools::document()
library(bbnet)
??multiplot
devtools::document()
??multiplot
??multiplot
library(bbnet)
??multiplot
??str_unique
devtools::document()
library(bbnet)
??multiplor
??multiplot
??str_unique
devtools::document()
library(bbnet)
??multiplot
??str_unique
devtools::document()
pkgload::dev_help('multiplot')
??calculateRawCosts
??invacost
install.packages("invacost")
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
devtools::document()
pkgload::dev_help('multiplot')
devtools::document()
pkgload::dev_help('multiplot')
library(bbnet)
# Create example ggplot objects
plot1 <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
plot2 <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
plot3 <- ggplot(mtcars, aes(x=gear, y=wt)) + geom_point()
multiplot(plot1, plot2, plot3)
v <- c(1,2,3)
devtools::document()
pkgload::dev_help('isEmpty')
isEmpty(list(a = 1, b = 2))
isEmpty(mtcars)
v<-
c()
isEmpty(v)
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
devtools::document()
pkgload::dev_help('bbn.predict')
library(bbnet)
devtools::document()
pkgload::dev_help('bbn.timeseries')
library(bbnet)
devtools::document()
pkgload::dev_help('bbn.visualise')
devtools::document()
devtools::document()
library(bbnet)
usethis::use_vignette("my-vignette")
devtools::load_all()
devtools::document()
library(bbnet)
devtools::document()
usethis::use_readme_rmd()
devtools::build_readme()
usethis::use_cran_badge()
usethis::use_cran_badge()
usethis::use_cran_badge()
usethis::use_coverage()
use_github_actions()
use_github_actions(R CMD check)
R CMD check
usethis::use_readme_rmd()
usethis::use_release_issue()
devtools::document()
library(bbnet)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
devtools::build_readme()
devtools::build_readme()
usethis::use_release_issue()
usethis::use_release_issue()
usethis::use_release_issue()
use_github_action()
usethis::use_github_action()
citation("bbnet")
devtools::document()
devtools::build_readme()
# install.packages("devtools")
#devtools::install_github("vda1r22/bbnet")
install.packages("bbnet")
library(bbnet)
data("my_BBN")
head(my_BBN)
??bbn.predict
bbn.predict(my_BBN, dogwhelk)
devtools::load_all()
usethis::use_testthat(3)
library(testthat)
library(bbnet)
test_check("bbnet")
usethis::use_r()
usethis::use_r("bbnet")
use_testthat(3)
library(testthat)
use_testthat(3)
devtools::load_all()
usethis::use_testthat("bbnet")
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
library(tibble)
# Creating the dataframe for our BBN network
MPANetwork <- tibble(
Entity = c("Lobster fishery", "Finfish fishery", "Fish density", "Seals", "Lobster Recruitment"),
`Lobster fishery` = c(NA, NA, NA, NA, NA),
`Finfish fishery` = c(NA, NA, -3, NA, NA),
`Fish density` = c(NA, NA, NA, -2, NA),
`Seals` = c(NA, NA, 3, NA, NA),
`Lobster Recruitment` = c(NA, NA, -2, NA, NA),
`Divers` = c(NA, NA, NA, NA, NA),
`Spiny lobster` = c(-3, NA, NA, -3, 4),
`Lobster` = c(-4, NA, NA, -3, 4),
`Snails` = c(NA, NA, NA, NA, NA),
)
# Creating prior 1
NoPotting <- tibble(
Increase = c(-4, 0, 0, 0, 0),
Node = c("Lobster fishery", "Finfish fishery", "Fish density", "Seals", "Lobster Recruitment")
)
out <- bbn.predict(bbn.model = MPANetwork, priors1 = NoPotting, figure = 0)
bbn.predict(bbn.model = MPANetwork, priors1 = NoPotting, figure = 0)
bbn.predict(bbn.model = MPANetwork, priors1 = NoPotting, figure = 0)
MPANetwork <- read.csv(file.choose())
save(MPANetwork, file='MPANetwork.rda')
MPANetwork <- read.csv(file.choose())
MPANetwork <- read.csv(file.choose())
data("my_BBN")
data("my_network")
View(my_network)
View(MPANetwork)
save(MPANetwork, file='MPANetwork.rda')
devtools::load_all()
# Loading the dataframe for our BBN network
data(MPANetwork)
NoPotting <- read.csv(file.choose())
View(NoPotting)
NoPotting <- read.csv(file.choose())
View(NoPotting)
# Loading the dataframe for our BBN network
data(MPANetwork)
# Loading prior 1
data(NoPotting)
NoPotting <- read.csv(file.choose())
save(NoPotting, file='NoPotting.rda')
devtools::load_all()
# Loading the dataframe for our BBN network
data(MPANetwork)
# Loading prior 1
data(NoPotting)
bbn.predict(bbn.model = MPANetwork, priors1 = NoPotting, figure = 0)
expect_silent(bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0)
)
data("my_BBN")
data("dogwhelk")
expect_silent(bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0))
devtools::load_all()
devtools::load_all()
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, disturbance = 1)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 1)
test_that("bbn.timeseries executes with a single timestep", {
data("my_BBN")
data("combined")
# Test with a minimal number of timesteps (e.g., 1) to see if the function can handle it
expect_warning(
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 1),
regexp = "pseudoinverse used|neighborhood radius|reciprocal condition number|span too small",
fixed = FALSE
)
})
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 10
)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 100)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 6)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 10
)
View(combined)
bbn.sensitivity(bbn.model = my_BBN
)
bbn.sensitivity(bbn.model = my_BBN
)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', '
Periwinkle', 'Biofilm'
)
bbn.sensitivity(bbn.model = my_BBN, "Biofilm")
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
bbn.sensitivity(bbn.model = my_BBN)
devtools::load_all()
library(bbnet)
bbn.sensitivity(bbn.model = my_BBN)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', '
Periwinkle', 'Biofilm')
bbn.sensitivity(bbn.model = my_BBN, "Biofilm")
bbn.sensitivity(bbn.model = my_BBN, "Limpet")
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100
)
bbn.network.diagram(bbn.network = my_network)
devtools::load_all()
bbn.network.diagram(bbn.network = my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 1.2, arrow.size = 6))
bbn.network.diagram(bbn.network = my_network, font.size = 1.2, arrow.size = 6)
bbn.network.diagram(bbn.network = my_network, arrange = layout_func)
bbn.network.diagram(bbn.network = my_network, arrange = layout_func)
bbn.network.diagram(bbn.network = my_network, arrange = layout_on_sphere)
devtools::test()
devtools::load_all()
library(bbnet)
check()
devtools::dev_sitrep()
devtools::install_dev_deps()
devtools::install_dev_deps()
install.packages(c("htmltools", "httpuv", "igraph", "mvnormtest", "shiny", "xfun"))
install.packages(c("htmltools", "httpuv", "igraph", "mvnormtest", "shiny", "xfun"))
install.packages(c("htmltools", "httpuv", "igraph", "mvnormtest", "shiny", "xfun"))
devtools::load_all()
devtools::dev_sitrep()
devtools::update_packages("devtools")
devtools::dev_sitrep()
devtools::install_dev_deps()
devtools::dev_sitrep()
usethis::use_build_ignore()
use_readme_rmd()
library(bbnet)
proj_sitrep()
library(bbnet)
data("my_BBN")
head(my_BBN)
proj_sitrep()
testthat::test_path()
load_all()
install.packages(c("htmltools", "xfun"))
