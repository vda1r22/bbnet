# Loading prior 1
data(NoPotting)
NoPotting <- read.csv(file.choose())
save(NoPotting, file='NoPotting.rda')
devtools::load_all()
# Loading the dataframe for our BBN network
data(MPANetwork)
# Loading prior 1
data(NoPotting)
bbn.predict(bbn.model = MPANetwork, priors1 = NoPotting, figure = 0)
expect_silent(bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0)
)
data("my_BBN")
data("dogwhelk")
expect_silent(bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0))
devtools::load_all()
devtools::load_all()
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, disturbance = 1)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 1)
test_that("bbn.timeseries executes with a single timestep", {
data("my_BBN")
data("combined")
# Test with a minimal number of timesteps (e.g., 1) to see if the function can handle it
expect_warning(
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 1),
regexp = "pseudoinverse used|neighborhood radius|reciprocal condition number|span too small",
fixed = FALSE
)
})
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 10
)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 100)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 6)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 10
)
View(combined)
bbn.sensitivity(bbn.model = my_BBN
)
bbn.sensitivity(bbn.model = my_BBN
)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', '
Periwinkle', 'Biofilm'
)
bbn.sensitivity(bbn.model = my_BBN, "Biofilm")
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
bbn.sensitivity(bbn.model = my_BBN)
devtools::load_all()
library(bbnet)
bbn.sensitivity(bbn.model = my_BBN)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', '
Periwinkle', 'Biofilm')
bbn.sensitivity(bbn.model = my_BBN, "Biofilm")
bbn.sensitivity(bbn.model = my_BBN, "Limpet")
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100
)
bbn.network.diagram(bbn.network = my_network)
devtools::load_all()
bbn.network.diagram(bbn.network = my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 1.2, arrow.size = 6))
bbn.network.diagram(bbn.network = my_network, font.size = 1.2, arrow.size = 6)
bbn.network.diagram(bbn.network = my_network, arrange = layout_func)
bbn.network.diagram(bbn.network = my_network, arrange = layout_func)
bbn.network.diagram(bbn.network = my_network, arrange = layout_on_sphere)
devtools::test()
devtools::load_all()
library(bbnet)
check()
devtools::dev_sitrep()
devtools::install_dev_deps()
devtools::install_dev_deps()
install.packages(c("htmltools", "httpuv", "igraph", "mvnormtest", "shiny", "xfun"))
install.packages(c("htmltools", "httpuv", "igraph", "mvnormtest", "shiny", "xfun"))
install.packages(c("htmltools", "httpuv", "igraph", "mvnormtest", "shiny", "xfun"))
devtools::load_all()
devtools::dev_sitrep()
devtools::update_packages("devtools")
devtools::dev_sitrep()
devtools::install_dev_deps()
devtools::dev_sitrep()
usethis::use_build_ignore()
use_readme_rmd()
library(bbnet)
proj_sitrep()
library(bbnet)
data("my_BBN")
head(my_BBN)
proj_sitrep()
testthat::test_path()
load_all()
install.packages(c("htmltools", "xfun"))
devtools::load_all()
devtools::check()
data(my_BBN, combined)
bbn.predict(bbn.model = my_BBN, priors1 = combined, boot_max=100, values=1, figure=1, font.size=5)
data(my_network)
bbn.network.diagram(bbn.network = my_network, font.size=0.7, arrow.size=4, arrange = layout_on_sphere)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps=5, disturbance=1)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps=6, disturbance=1, threshold=0.2, font.size=0.7, arrow.size=4)
library(bbnet)
devtools::load_all()
devtools::check()
devtools::document()
build_readme()
install.packages("installr")
# Load installr
library(installr)
# Run the update function
updateR()
usethis::use_cran_badge()
usethis::use_coverage()
use_github_actions()
devtools::document()
usethis::use_cran_badge()
usethis::use_coverage()
use_github_actions()
devtools::build_readme()
devtools::build_readme()
use_readme_rmd()
usethis::use_news_md()
devtools::check()
devtools::check()
# Ensure function requires at least one key variable
test_that("bbn.sensitivity requires at least one key variable", {
data("my_BBN")
expect_error(bbn.sensitivity(bbn.model = my_BBN),
"Need to input at least one key variable")
})
devtools::check()
usethis::use_cran_badge()
usethis::use_coverage()
use_github_actions()
devtools::build_readme()
bbn.model = my_BBN, priors1 = combined, timesteps = 1)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 1)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 2)
bbn.sensitivity(bbn.model = my_BBN)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', 'Periwinkle', 'Biofilm')
bbn.sensitivity(bbn.model = my_BBN, "Limpet")
devtools::build_readme()
bbn.sensitivity(bbn.model = my_BBN, "Limpet", boot_max = 100)
library(bbnet)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100
)
bbn.model = my_BBN, 'Limpet', 'Green Algae', 'Periwinkle', 'Biofilm', boot_max = 100),
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', 'Periwinkle', 'Biofilm', boot_max = 100),
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', 'Green Algae', 'Periwinkle', 'Biofilm', boot_max = 100)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = 100)
bn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100)
library(bbnet)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = -100)
bbn.sensitivity(bbn.model = my_BBN, 'Limpet', boot_max = 100)
devtools::load_all()
devtools::document()
devtools::build_readme()
devtools::check()
devtools::build_readme()
usethis::use_release_issue()
usethis::use_release_issue()
usethis::use_news_md()
use_release_issue()
usethis::use_release_issue()
usethis::use_release_issue()
usethis::use_release_issue()
use_mit_license()
usethis::use_mit_license()
usethis::use_release_issue()
usethis::use_release_issue()
usethis::edit_r_environ()
usethis::use_release_issue()
usethis::use_cran_comments()
library(bbnet)
??my_BBN
devtools::check()
knitr::opts_chunk$set(echo = T)
library(bbnet)
data("my_BBN")
head(my_BBN)
View(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
View(winkle)
citation("bbnet")
d <- read.csv(file.choose())
save(d, file='NoTake.rda')
git pull
devtools::check()
devtools::build_readme()
devtools::check()
devtools::check()
devtools::load_all()
citation("bbnet")
data("MPANetwork")
data("NoPotting")
data("NoTake")
NoTake <- read.csv(file.choose())
save(NoTake, file='NoTake.rda')
data("NoTake")
NoTake <- read.csv(file.choose())
data("NoTake")
save(NoTake, file='NoTake.rda')
NoTake <- read.csv(file.choose())
save(NoTake, file='NoTake.rda')
data("NoTake")
devtools::build_readme()
uses: r-lib/actions/check-r-package@v1
rcmdcheck()
.github/workflows/R-CMD-check.yaml
install.packages("rcmdcheck")
library(rcmdcheck)
rcmdcheck()
chk <- rcmdcheck()
cran_check_flavours()
cran_check_results()
cran_check_results(bbnet)
chk
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
saveRDS(~/GitHub/bbnet/R, file = "combined.rds")
saveRDS(~\GitHub\bbnet\R, file = "combined.rds")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_data(my_BBN_data, path = "data/my_BBN_data.rda", overwrite = TRUE)
usethis::use_data(my_BBN_data, path = "data/my_BBN.rda", overwrite = TRUE)
usethis::use_data(my_BBN_data, path = "data/my_BBN.rda", overwrite = TRUE)
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::build_readme()
devtools::load_all()
devtools::build_readme()
roxygen2::roxygenise()
git add README.Rmd README.md
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
devtools::load_all()
rcmdcheck()
rcmdcheck()
devtools::document()
devtools::check()
devtools::load_all()
devtools::build_readme()
roxygen2::roxygenise()
devtools::load_all()
rcmdcheck()
devtools::document()
devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
devtools::document()
rcmdcheck()
data("my_network")
data("my_network")
devtools::document()
devtools::load_all()
rcmdcheck()
library(rcmdcheck)
rcmdcheck()
devtools::document()
devtools::document()
devtools::load_all()
rcmdcheck()
devtools::document()
devtools::build_readme()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
devtools::document()
rcmdcheck()
data(my_BBN, combined)
data(my_BBN, combined)
priors_list <- list(combined)
bbn.predict(bbn.model = my_BBN, prior_list, boot_max=100, values=1, figure=1, font.size=5)
# Assuming 'my_BBN' is previously defined:
# bbn.predict(my_BBN, priors_list, boot_max=100, values=1, figure=1, font.size=5)
devtools::document()
rcmdcheck()
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = combined, figure = 0) # figure set to zero, this is explained below
devtools::document()
data("my_network")
head(my_network)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
devtools::document()
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
force(combined)
force(winkle)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
devtools::document()
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
devtools::document()
devtools::build_readme()
rcmdcheck()
devtools::document()
devtools::build_readme()
devtools::document()
rcmdcheck()
devtools::build_readme()
devtools::document()
devtools::build_readme()
devtools::build_readme()
devtools::document()
devtools::document()
devtools::build_readme()
devtools::build_readme()
devtools::document()
devtools::build_readme()
devtools::document()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
rcmdcheck()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
rcmdcheck()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
rcmdcheck()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
install.packages("igraph")
devtools::document()
roxygen2::roxygenise()
devtools::build_readme()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
library(rcmdcheck)
rcmdcheck()
install.packages("igraph")
install.packages(c("ape", "bibliometrix", "brio", "broom.helpers", "bslib", "crul", "data.table", "DT", "emmeans", "estimability", "FactoMineR", "farver", "fs", "ggplot2", "ggstance", "ggstats", "gh", "gtable", "htmltools", "httr2", "knitr", "labelled", "lme4", "munsell", "openalexR", "openssl", "pkgdown", "promises", "ragg", "RcppArmadillo", "shiny", "sp", "stringi", "testthat", "tidytext", "tinytex", "tm", "TMB", "xfun", "xopen"))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
devtools::build_readme()
install.packages("dplyr")
install.packages("ggplot2")
install.packages("igraph")
install.packages("tibble")
roxygen2::roxygenise()
install.packages("roxygen2")
install.packages("rcmdcheck")
roxygen2::roxygenise()
devtools::build_readme()
install.packages("devtools")
devtools::build_readme()
rcmdcheck()
library(rcmdcheck)
rcmdcheck()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
devtools::document()
devtools::document()
devtools::document()
devtools::build_readme()
devtools::build_readme()
rcmdcheck()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
rcmdcheck()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(bbnet)
data("my_BBN")
head(my_BBN)
data("dogwhelk", "winkle", "combined")
head(dogwhelk)
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, figure = 0) # figure set to zero, this is explained below
bbn.predict(bbn.model = my_BBN, priors1 = dogwhelk, priors2 = winkle, priors3= combined, figure = 2, boot_max = 100, values = 0, font.size = 7)
bbn.timeseries(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2)
bbn.visualise(bbn.model = my_BBN, priors1 = combined, timesteps = 5, disturbance = 2, threshold=0.05, font.size=0.7, arrow.size=4)
bbn.sensitivity(bbn.model = my_BBN, boot_max = 100, 'Limpet', 'Green Algae')
data("my_network")
head(my_network)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 4, arrange = layout_on_sphere)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout_on_grid)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.random)
bbn.network.diagram(bbn.network = my_network, font.size = 0.7, arrow.size = 2, arrange = layout.circle)
citation("bbnet")
devtools::build_readme()
devtools::build_readme()
roxygen2::roxygenise()
urlchecker::url_check()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
urlchecker::url_check()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
devtools::check_win_devel()
usethis::use_cran_comments()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
devtools::check(remote = TRUE, manual = TRUE)
roxygen2::roxygenise()
devtools::check(remote = TRUE, manual = TRUE)
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
rmarkdown::render("README.Rmd")
roxygen2::roxygenise()
devtools::check(remote = TRUE, manual = TRUE)
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
citation("bbnet")
roxygen2::roxygenise()
devtools::build_readme()
rmarkdown::render("README.Rmd")
roxygen2::roxygenise()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
roxygen2::roxygenise()
devtools::build_readme()
rmarkdown::render("README.Rmd")
roxygen2::roxygenise()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
roxygen2::roxygenise()
rmarkdown::render("README.Rmd")
devtools::build_readme()
roxygen2::roxygenise()
devtools::build_readme()
rmarkdown::render("README.Rmd")
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
rmarkdown::render("README.Rmd")
roxygen2::roxygenise()
